// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(cuid())
  fullName  String
  email     String    @unique
  password  String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]
  products  Product[] @relation("UserProducts")
}

model Order {
  id        String       @id @unique @default(cuid())
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  products  OrderProduct[]
}

model Product {
  id          String        @id @unique @default(cuid())
  title       String
  description String
  price       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  createdBy   User?         @relation(fields: [createdById], references: [id], name: "UserProducts")
  createdById String?
  collection  Collection?   @relation(fields: [collectionId], references: [id])
  collectionId String?
  colors      Color[]       @relation("ProductColors")
  orders      OrderProduct[]
}

model Collection {
  id          String    @id @unique @default(cuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  products    Product[]
}

model Color {
  id        String   @id @unique @default(cuid())
  colorName String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  products  Product[] @relation("ProductColors")
}

model OrderProduct {
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  @@id([orderId, productId])
  @@index([orderId])
  @@index([productId])
}
